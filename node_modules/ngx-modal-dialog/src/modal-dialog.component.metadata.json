[{"__symbolic":"module","version":4,"metadata":{"ModalDialogComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":20,"character":1},"arguments":[{"selector":"modal-dialog","styles":["\n      @-moz-keyframes shake {\n        from, to                { transform: translate3d(0, 0, 0); }\n        10%, 30%, 50%, 70%, 90% { transform: translate3d(-2rem, 0, 0); }\n        20%, 40%, 60%, 80%      { transform: translate3d(2rem, 0, 0); }\n      }\n      @-webkit-keyframes shake {\n        from, to                { transform: translate3d(0, 0, 0); }\n        10%, 30%, 50%, 70%, 90% { transform: translate3d(-2rem, 0, 0); }\n        20%, 40%, 60%, 80%      { transform: translate3d(2rem, 0, 0); }\n      }\n      @keyframes shake {\n        from, to                { transform: translate3d(0, 0, 0); }\n        10%, 30%, 50%, 70%, 90% { transform: translate3d(-2rem, 0, 0); }\n        20%, 40%, 60%, 80%      { transform: translate3d(2rem, 0, 0); }\n      }\n\n      .ngx-modal {\n        display: flex;\n      }\n      .ngx-modal-shake {\n        backface-visibility: hidden;\n        -webkit-animation-duration: 0.5s;\n        -moz-animation-duration: 0.5s;\n        animation-duration: 0.5s;\n        -webkit-animation-fill-mode: both;\n        -moz-animation-fill-mode: both;\n        animation-fill-mode: both;\n        -webkit-animation-iteration-count: infinite;\n        -moz-animation-iteration-count: infinite;\n        animation-iteration-count: infinite;\n        -webkit-animation-name: shake;\n        -moz-animation-name: shake;\n        animation-name: shake;\n      }\n  "],"template":"\n    <div *ngIf=\"settings.overlayClass && showOverlay\" [ngClass]=\"[settings.overlayClass, animateOverlayClass]\"></div> \n    <div [ngClass]=\"[settings.modalClass, animateModalClass]\" #dialog>\n      <div [ngClass]=\"settings.modalDialogClass\">\n        <div [ngClass]=\"[ showAlert ? settings.alertClass : '', settings.contentClass]\">\n          <div [ngClass]=\"settings.headerClass\">\n            <h4 [ngClass]=\"settings.headerTitleClass\">{{title}}</h4>\n            <button (click)=\"close()\" *ngIf=\"!actionButtons || !actionButtons.length\" type=\"button\"\n                    [title]=\"settings.closeButtonTitle\"\n                    [ngClass]=\"settings.closeButtonClass\">\n            </button>\n          </div>\n          <div [ngClass]=\"settings.bodyClass\">\n            <i #modalDialogBody></i>\n          </div>\n          <div [ngClass]=\"settings.footerClass\" *ngIf=\"actionButtons && actionButtons.length\">\n            <button *ngFor=\"let button of actionButtons\" (click)=\"doAction(button.onAction)\"\n                    [ngClass]=\"button.buttonClass || settings.buttonClass\">{{button.text}}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  "}]}],"members":{"dynamicComponentTarget":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":84,"character":3},"arguments":["modalDialogBody",{"read":{"__symbolic":"reference","module":"@angular/core","name":"ViewContainerRef","line":84,"character":40}}]}]}],"dialogElement":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"ViewChild","line":85,"character":3},"arguments":["dialog"]}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":127,"character":34},{"__symbolic":"reference","module":"@angular/core","name":"ComponentFactoryResolver","line":128,"character":48}]}],"onClick":[{"__symbolic":"method","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"HostListener","line":131,"character":3},"arguments":["click",["$event"]]}]}],"dialogInit":[{"__symbolic":"method"}],"ngOnInit":[{"__symbolic":"method"}],"ngOnDestroy":[{"__symbolic":"method"}],"doAction":[{"__symbolic":"method"}],"close":[{"__symbolic":"method"}],"_setOptions":[{"__symbolic":"method"}],"_closeIfSuccessful":[{"__symbolic":"method"}],"_finalizeAndDestroy":[{"__symbolic":"method"}],"_triggerAlert":[{"__symbolic":"method"}],"isPromise":[{"__symbolic":"method"}],"isObservable":[{"__symbolic":"method"}]}}}}]