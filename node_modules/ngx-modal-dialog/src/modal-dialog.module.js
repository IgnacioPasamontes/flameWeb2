// components and directives
import { ModalDialogComponent } from './modal-dialog.component';
import { ModalDialogService } from './modal-dialog.service';
import { SimpleModalComponent } from './simple-modal.component';
import { ModalDialogInstanceService } from './modal-dialog-instance.service';
// modules
import { CommonModule } from '@angular/common';
import { NgModule, InjectionToken, SkipSelf, Optional } from '@angular/core';
/**
 * Guard to make sure we have single initialization of forRoot
 * @type {InjectionToken<ModalDialogModule>}
 */
export var MODAL_DIALOG_FORROOT_GUARD = new InjectionToken('MODAL_DIALOG_FORROOT_GUARD');
var ModalDialogModule = /** @class */ (function () {
    function ModalDialogModule() {
    }
    ModalDialogModule.forRoot = function () {
        return {
            ngModule: ModalDialogModule,
            providers: [
                {
                    provide: MODAL_DIALOG_FORROOT_GUARD,
                    useFactory: provideForRootGuard,
                    deps: [[ModalDialogModule, new Optional(), new SkipSelf()]]
                },
                ModalDialogInstanceService
            ]
        };
    };
    ModalDialogModule.decorators = [
        { type: NgModule, args: [{
                    imports: [CommonModule],
                    declarations: [ModalDialogComponent, SimpleModalComponent],
                    entryComponents: [ModalDialogComponent, SimpleModalComponent],
                    exports: [ModalDialogComponent, SimpleModalComponent],
                    providers: [ModalDialogService]
                },] },
    ];
    return ModalDialogModule;
}());
export { ModalDialogModule };
/**
 * @param dialogModule
 * @returns {string}
 */
export function provideForRootGuard(dialogModule) {
    if (dialogModule) {
        throw new Error("ModalDialogModule.forRoot() called twice.");
    }
    return 'guarded';
}
